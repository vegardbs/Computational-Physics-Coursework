#include <iostream>
#include <armadillo>
#include <math.h>
#include <time.h>
#include <fstream>

using namespace std;
using namespace arma;



int main()
{
    double D = 1;
    int n = 100;
    ofstream data1;
    double dt = 5e-5;
    int tsteps = 500;
    double xsteps = 1/double(n);
    double a = dt/(D*xsteps*xsteps);

    // Initialize temporary and solution matrix
     mat U = zeros<mat>(n,n);
     mat U_temp = zeros<mat>(n,n);

     // Initial conditions guess and inital value.
     for (int i=0 ; i < n ; i++){
         for(int j=0 ; j < n ; j++){
         U_temp(i,j)=0.5;
         U(0,j)=1;}
     }


 // Start time iteration
     for (int t=0; t < tsteps ; t++){

         int max_iter = 1000;
         int iterations = 0;
         double diff=1;

// Compute inner coordinates by Jacobis algorithm
     while((iterations<=max_iter) && (diff>0.1)){
         diff = 0.0;
         U_temp = U;

         for (int j=1 ; j < n ; j++){
         for (int i=1 ; i < n ; i++){
             if(i==0)          { U(i,j) = 1; } // Boundary conditions
             else if(j==0)     { U(i,j) = 0; }
             else if(i==(n-1)) { U(i,j) = 0; }
             else if(j==(n-1)) { U(i,j) = 0; }
             else              { U(i,j) = (1/(1+4*a))*(a*( U_temp(i+1,j) + U_temp(i-1,j)
                                   + U_temp(i,j+1) + U_temp(i,j-1))+U(i,j)); }

             diff +=fabs(U_temp(i,j)-U(i,j)); // Calculate difference

         }}
        iterations++;
        diff/=pow((double)n,2.0);
     }

}
        data1.open("data1");
        data1 << U << endl;
        data1.close();

}

